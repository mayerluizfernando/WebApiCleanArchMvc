JetBrains Rider
https://www.jetbrains.com/help/rider/Navigation_and_Search__Navigating_Between_To_do_Items.html#patterns

Code Maze - Site Excelente DotNet e eBooks pagos 
C# Reference    ->  https://code-maze.com/csharp-back-to-basics/
Books           ->  https://code-maze.com/ultimate-aspnetcore-webapi-second-edition/?source=tbanner&p=aspnetcore-webapi-best-practices

CleanArchMvc.Domain:		Não possui nenhuma dependência
CleanArchMvc.Application:	Dependência com projeto CleanArchMvc.Domain
CleanArchMvc.Infra.Data:	Dependência com projeto CleanArchMvc.Domain
CleanArchMvc.Infra.IoC:		Dependência com projeto CleanArchMvc.Domain, CleanArchMvc.Application, CleanArchMvc.Infra.Data
WebApiApp.WebUI:			Dependência com projeto CleanArchMvc.Infra.IoC

dotnet tool install --global dotnet-ef
remove-migration ou dotnet ef migrations remove
get-migration dotnet ef migrations list 
add-migration <tag>
update-database

dotnet ef migrations remove Inicial --project CleanArchMvc.Infra.Data
dotnet ef migrations add Inicial --project CleanArchMvc.Infra.Data
dotnet ef database update Inicial2 --project CleanArchMvc.Infra.Data
dotnet ef migrations list --project CleanArchMvc.Infra.Data

Controller InfraPay simulação para ver como a arquitetura se comporta c/ acesso a serviços REST externos 
Problema do ID int nas entidades ainda não resolvido. Como configurar o entity para não implementar o identity do SQL Server 
	-Mesmo utilizando as possiveis configurações do fluent quando o ID é int a migration gera indentity para uam propriedade Id int.

	Guia de estudos 
	- data anottations web api/fluent
	- Objetos de retorno http/webapi com status code tipo return Ok(jsonData) ou new CreatedAtRouteResult("GetCategory", new { id = k.Id }, k);

	Model Validation
	https://learn.microsoft.com/en-us/aspnet/web-api/overview/formats-and-model-binding/model-validation-in-aspnet-web-api

	ASP.NET Core Web API Best Practices
	https://code-maze.com/aspnetcore-webapi-best-practices/
	
	Para incluir um novo objeto/Ciclo Completo:
	
	WebApiCleanArchMvc
	    P1.) Criar Controller           -> WebApiCleanArchMvc/Controllers
	    
	CleanArchMvc.Application
        P2.) Criar Interface do Service -> CleanArchMvc.Application/Interfaces
        P3.) Criar Service              -> CleanArchMvc.Application/Services
	
	CleanArchMvc.Domain
	    P4.) Criar Interface do Domain  ->  CleanArchMvc.Domain/Interfaces
	
	CleanArchMvc.Infra.Data
	    P5.) Criar Repository           -> CleanArchMvc.Infra.Data/3.Repositories
	  


Clean Architecture -> https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html
Microsoft -> https://learn.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/common-web-application-architectures


**************************************************************************************
	https://stackoverflow.com/questions/2268699/domain-driven-design-domain-service-application-service
	Summary
    A complete application consists of three major layers:
    
    - domain
    - infrastructure
    - application

    The domain layer contains the domain entities and stand-alone domain services. Any domain concepts (this includes domain services, but also repositories) that depend on external resources, are defined by interfaces.
    
    The infrastructure layer contains the implementation of the interfaces from the domain layer. These implementations may introduce new non-domain dependencies that have to be provided the application. These are the application services and are represented by interfaces.
    
    The application layer contains the implementation of the application services. The application layer may also contain additional implementations of domain interfaces, if the implementations provided by the infrastructure layer are not sufficient.
    
    Although this perspective may not match with the general DDD definition of services, it does separate the domain from the application and allows you to share the domain (and infrastructure) assembly between several applications.
	